package resturant;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javafx.beans.property.*;

public class Order {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/restaurant";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "root";

    private final IntegerProperty orderId;
    private final List<Item> items;
    private final StringProperty status;
    private final StringProperty customerName;

    // Constructor for a new order
    public Order(String customerName, List<Item> items, String status) {
        this.orderId = new SimpleIntegerProperty(1); // Will be generated by the database
        this.customerName = new SimpleStringProperty(customerName);
        this.items = new ArrayList<>(items);
        this.status = new SimpleStringProperty(status);
    }

    // Constructor for retrieving orders from the database
    public Order(int orderId, String customerName, String status) {
        this.orderId = new SimpleIntegerProperty(orderId);
        this.customerName = new SimpleStringProperty(customerName);
        this.items = new ArrayList<>(); // Retrieve items separately
        this.status = new SimpleStringProperty(status);
    }

    public int getOrderId() {
        return orderId.get();
    }

    public IntegerProperty orderIdProperty() {
        return orderId;
    }

    public List<Item> getItems() {
        return items;
    }

    public String getStatus() {
        return status.get();
    }

    public StringProperty statusProperty() {
        return status;
    }

    public String getCustomerName() {
        return customerName.get();
    }

    public StringProperty customerNameProperty() {
        return customerName;
    }

    public void setStatus(String status) {
        this.status.set(status);
    }

    // Save the order to the database
    public void saveToDatabase() {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            // Insert into Orders table
            String insertOrderSql = "INSERT INTO Orders (status, customerName) VALUES (?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertOrderSql, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, getStatus());
                pstmt.setString(2, getCustomerName());
                pstmt.executeUpdate();

                // Retrieve generated orderId
                ResultSet keys = pstmt.getGeneratedKeys();
                if (keys.next()) {
                    this.orderId.set(keys.getInt(1));
                }
            }

            // Insert items into OrderItems table
            String insertItemsSql = "INSERT INTO OrderItems (orderId, itemName, quantity) VALUES (?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(insertItemsSql)) {
                for (Item item : items) {
                    pstmt.setInt(1, getOrderId());
                    pstmt.setString(2, item.getItemName());
                    pstmt.setInt(3, item.getQuantity());
                    pstmt.executeUpdate();
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Load all orders from the database
    public static List<Order> loadAllOrders() {
        List<Order> orders = new ArrayList<>();
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String query = "SELECT * FROM Orders";
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    int orderId = rs.getInt("orderId");
                    String customerName = rs.getString("customerName");
                    String status = rs.getString("status");

                    // Create an Order object
                    Order order = new Order(orderId, customerName, status);

                    // Load items for the order
                    String itemQuery = "SELECT * FROM OrderItems WHERE orderId = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(itemQuery)) {
                        pstmt.setInt(1, orderId);
                        try (ResultSet itemRs = pstmt.executeQuery()) {
                            while (itemRs.next()) {
                                String itemName = itemRs.getString("itemName");
                                int quantity = itemRs.getInt("quantity");
                                order.getItems().add(new Item(itemName, quantity));
                            }
                        }
                    }

                    orders.add(order);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return orders;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Order ID: " + getOrderId() + ", Customer: " + getCustomerName() + ", Status: " + getStatus() + ", Items: ");
        for (Item item : items) {
            sb.append(item.getItemName()).append(" x").append(item.getQuantity()).append("; ");
        }
        return sb.toString();
    }
}
